trigger:
  - main

variables:
  # Azure Resource Manager connection created during pipeline creation
  # Web app name
  webAppName: 'laravel'
  # PHP version
  phpVersion: '8.3'
  # Agent VM image name
  vmImageName: 'ubuntu-20.04'
  # Environment name
  environmentName: 'apppp_group'
  # Root folder under which your composer.json file is available
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
  - stage: Build
    displayName: Build stage
    variables:
      phpVersion: '8.3'
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              php artisan cache:clear
              php artisan route:clear
              php artisan config:clear
              php artisan view:clear

              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -version
            workingDirectory: $(rootFolder)
            displayName: 'Use PHP version $(phpVersion)'

          - script: |
              composer install --no-interaction --prefer-dist
              npm install
              npm run build
            workingDirectory: $(rootFolder)
            displayName: 'Composer install and npm build'

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(rootFolder)'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: 'Upload package'
            artifact: drop

  - stage: Deploy
    displayName: 'Deploy Web App'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeploymentJob
        pool:
          vmImage: $(vmImageName)
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure Web App: $(webAppName)'
                  inputs:
                    azureSubscription: 'bani_sc'
                    appName: $(webAppName)
                    appType: webAppLinux
                    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
